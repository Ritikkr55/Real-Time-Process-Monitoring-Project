import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
import psutil
import time
import threading
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use("Agg")  # Avoid GUI conflicts with Tkinter

# Theme colors
COLORS = {
    'bg_primary': '#1E1E2F',
    'bg_secondary': '#2E2E3E',
    'bg_tertiary': '#3E3E5E',
    'text_primary': '#FFFFFF',
    'text_secondary': '#CCCCCC',
    'accent_blue': '#4FC3F7',
    'accent_green': '#81C784',
    'accent_red': '#EF5350',
    'accent_pink': '#FF80AB',
    'warning': '#FFD54F'
}

# Root window
root = tk.Tk()
root.title("⚙️ Real-Time Process Monitor")
root.geometry("1000x600")
root.configure(bg=COLORS['bg_primary'])

# Style config
style = ttk.Style()
style.theme_use("clam")
style.configure("Treeview", background=COLORS['bg_secondary'], 
                foreground=COLORS['text_primary'], fieldbackground=COLORS['bg_secondary'],
                rowheight=28, font=('Helvetica', 10))
style.configure("Treeview.Heading", background=COLORS['bg_tertiary'], 
                foreground=COLORS['text_primary'], font=('Helvetica', 10, 'bold'))

# Layout
left_frame = ttk.Frame(root)
left_frame.pack(side="left", fill="both", expand=True)

right_frame = ttk.Frame(root)
right_frame.pack(side="right", fill="both", expand=True)

# Treeview (process list)
columns = ("PID", "Name", "CPU %", "Memory %")
tree = ttk.Treeview(left_frame, columns=columns, show="headings", height=20)
for col in columns:
    tree.heading(col, text=col)
    tree.column(col, anchor=tk.CENTER)

tree.tag_configure('high_cpu', background=COLORS['accent_red'])
tree.tag_configure('medium_cpu', background=COLORS['warning'])
tree.tag_configure('low_cpu', background=COLORS['bg_secondary'])

tree.pack(fill="both", expand=True, padx=5, pady=5)

scrollbar = ttk.Scrollbar(left_frame, orient="vertical", command=tree.yview)
tree.configure(yscrollcommand=scrollbar.set)
scrollbar.pack(side="right", fill="y")

# Filter Entry
filter_var = tk.StringVar()
filter_entry = tk.Entry(left_frame, textvariable=filter_var, font=('Helvetica', 10), 
                        fg=COLORS['text_secondary'], bg=COLORS['bg_primary'], 
                        insertbackground=COLORS['text_primary'])
filter_entry.insert(0, "Filter by Name...")
filter_entry.pack(fill="x", padx=5, pady=(10, 5))

def on_filter_click(event):
    if filter_entry.get() == "Filter by Name...":
        filter_entry.delete(0, tk.END)

filter_entry.bind("<Button-1>", on_filter_click)

# Animated Button Creator
def create_button(parent, text, command, bg, fg, hover_color):
    btn = tk.Button(parent, text=text, command=command,
                    bg=bg, fg=fg, font=('Helvetica', 10, 'bold'), relief='flat',
                    activebackground=hover_color, activeforeground=fg, cursor='hand2')
    return btn

# Kill Process
def kill_process():
    selected = tree.selection()
    if selected:
        try:
            pid = int(tree.item(selected[0])["values"][0])
            proc = psutil.Process(pid)
            proc.terminate()
            try:
                proc.wait(timeout=2)
            except psutil.TimeoutExpired:
                proc.kill()  # force kill if terminate fails
            update_process_list()
            messagebox.showinfo("Terminated", f"Process {pid} terminated.")
        except psutil.NoSuchProcess:
            messagebox.showerror("Error", "Process does not exist.")
        except Exception as e:
            messagebox.showerror("Error", str(e))
    else:
        messagebox.showinfo("Select a Process", "Please select a process first.")

# Change Priority
def change_priority(new_nice):
    selected = tree.selection()
    if selected:
        try:
            pid = int(tree.item(selected[0])["values"][0])
            psutil.Process(pid).nice(new_nice)
            messagebox.showinfo("Priority Changed", f"Process {pid} priority changed.")
        except Exception as e:
            messagebox.showerror("Error", str(e))

# Priority prompt
def prompt_priority():
    selected = tree.selection()
    if selected:
        new_nice = simpledialog.askinteger("Change Priority", "Enter new priority (-20 to 19):", minvalue=-20, maxvalue=19)
        if new_nice is not None:
            change_priority(new_nice)
    else:
        messagebox.showinfo("No Selection", "Please select a process first.")

# Button Frame
action_frame = ttk.Frame(left_frame)
action_frame.pack(fill="x", pady=5)

kill_btn = create_button(action_frame, "Kill Process", kill_process,
                         bg=COLORS['accent_red'], fg=COLORS['text_primary'],
                         hover_color=COLORS['accent_pink'])
kill_btn.pack(side="left", padx=5)

priority_btn = create_button(action_frame, "Change Priority", prompt_priority,
                             bg=COLORS['accent_blue'], fg=COLORS['text_primary'],
                             hover_color=COLORS['accent_green'])
priority_btn.pack(side="left", padx=5)

# Process list update
def update_process_list():
    for i in tree.get_children():
        tree.delete(i)
    keyword = filter_var.get().lower().strip()
    for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']):
        try:
            info = proc.info
            pid = info['pid']
            name = info['name']
            cpu = info['cpu_percent']
            mem = info['memory_percent']
            if keyword and keyword not in name.lower():
                continue
            if cpu > 50:
                tag = 'high_cpu'
            elif cpu > 20:
                tag = 'medium_cpu'
            else:
                tag = 'low_cpu'
            tree.insert("", "end", values=(pid, name, f"{cpu:.1f}", f"{mem:.1f}"), tags=(tag,))
        except:
            continue
    root.after(3000, update_process_list)

# Graphs
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(6, 5), dpi=100)
fig.tight_layout(pad=3.0)
canvas = FigureCanvasTkAgg(fig, master=right_frame)
canvas.get_tk_widget().pack(fill="both", expand=True, padx=10, pady=10)

cpu_usage, mem_usage = [], []

def update_graph():
    while True:
        cpu = psutil.cpu_percent()
        mem = psutil.virtual_memory().percent
        cpu_usage.append(cpu)
        mem_usage.append(mem)
        cpu_usage[:] = cpu_usage[-50:]
        mem_usage[:] = mem_usage[-50:]
        ax1.clear()
        ax2.clear()
        ax1.plot(cpu_usage, label='CPU %', color='cyan')
        ax2.plot(mem_usage, label='Memory %', color='magenta')
        ax1.set_title("CPU Usage")
        ax2.set_title("Memory Usage")
        ax1.set_ylim(0, 100)
        ax2.set_ylim(0, 100)
        ax1.grid(True)
        ax2.grid(True)
        canvas.draw()
        time.sleep(2)

# Run
update_process_list()
threading.Thread(target=update_graph, daemon=True).start()
root.mainloop()
